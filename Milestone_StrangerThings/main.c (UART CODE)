//Milestone 1 - Embedded Systems
//Michael Maloney and Michael Sorce
//Last Updated - 10/17/18

//Includes MSP430F5529 Header File
#include <msp430.h> 

int main(void)
{
    //stop watchdog timer
	WDTCTL = WDTPW | WDTHOLD;
	
	//Pin set up for outputs
	    //TA0.1, TA0.2, TA0.3 (TimerA0 capture compare registers) correspond to P1.2, P1.3, P1.4
	    //meaning CCR1, CCR2, and CCR3 can be used for hardware PWM
	    P1DIR |= 0x1C; //P1.2, P1.3, P1.4 set to output
	    P1SEL |= 0x1C; //P1.2, P1.3, P1.4 set to CCR outputs (CCR1, 2, and 3 respectively)


	//UART Initialization
	    P4SEL |= (BIT4 + BIT5); //Sets P4.4 to UART TX mode, P4.5 to UART RX mode

	    UCA1CTL1 |= UCSWRST;//puts state machine in reset
	    UCA1CTL1 = UCSSEL_2; //UART uses SMCLOCK

	    //The following three lines of code sets the baud-rate to 9600bps at 1 MHz (SMCLK)
	    //Found using TI Sample Code
	    UCA1BR0 = 6;
	    UCA1BR1 = 0;
	    UCA1MCTL |= UCBRS_0 + UCBRF_13 + UCOS16;

	    UCA1CTL1 &= ~UCSWRST;//starts UART state machine
	    UCA1IE |= UCRXIE;// Enable USCI_A0 RX interrupt


	//PWM Timer Initialization
	    //Initializes 4 Capture compare registers for Timer0 A5
	    //CCR0 controls base PWM count
	    //CCR1,2,3 control a color of the LED each (All off to start)
	    TA0CCR0 = 0xFF;//Max PWM count (255)
	    TA0CCR1 = 0;//RED
	    TA0CCR2 = 0;//GREEN
	    TA0CCR3 = 0;//BLUE

	    //Sets each CCTL to mode 2 (toggle)
	    TA0CCTL1 = OUTMOD_2;//RED
	    TA0CCTL2 = OUTMOD_2;//GREEN
	    TA0CCTL3 = OUTMOD_2;//BLUE


	    //sets up timer0 A5 with SMCLOCK, in upmode
	    //sets the PWM mode to OUTMOD_7 (reset/set)
	    TA0CTL = TASSEL_2 + MC_1 + OUTMOD_7;


	    __bis_SR_register(LPM0_bits + GIE);// Enter low power mode 0 with interrupts
	    __no_operation();// For debugger
}

//int to keep track of what byte is being received
int byte = 0;

//int to hold the value of the first byte received
int first = 0;

//UART Interrupt Vector and ISR
#pragma vector = USCI_A1_VECTOR
__interrupt void USCI_A1_ISR(void)
{
    //Case statement to decipher UART interrupt (0: No Interrupt, 2: RX Interrupt, 4: TX Interrupt) 
    switch(__even_in_range(UCA1IV, 4))
    {
    case 0://Vector 0: No Interrupt
        break;
    case 2://Vector 2: RXIFG (interrupt on receiving data)
        
        //switch that sets LEDs base on number of bytes received
        switch(byte)
        {
        //if initial byte received
        case 0:
            //hold byte value in 'first'
            first = UCA1RXBUF;
            //Transmit the received number minus the 3 (for the RBG values accepted)
            UCA1TXBUF = UCA1RXBUF - 3;
            break;
        case 1 :
            TA0CCR1 = UCA1RXBUF; //Set Value for RED LED
            break;
        case 2 :
            TA0CCR2 = UCA1RXBUF; //Set Value for GREEN LED
            break;
        case 3 :
            TA0CCR3 = UCA1RXBUF; //Set Value for BLUE LED
            break;
        default:
            //while not transmitting or receiving 
                while(!(UCA1IFG & UCTXIFG));
                    //Transmit what is being recieved
                    UCA1TXBUF = UCA1RXBUF;
            break;
        }
        
            //if byte counter is NOT equal to the initial message size - 1
            if(byte != first - 1)
            {
                //increment byte
                byte = byte + 1;
            }
            //if byte counter is equal to the initial message size - 1
            else if(byte == first - 1)
            {
                //reset byte
                byte = 0;
            }
        break;
        
        
    case 4://Vector 4: TXIFG (interrupt on transmitting data)
        break;
    default://Do nothing
        break;

    }
}
